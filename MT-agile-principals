**Verbally describe the 4 agile values**
	At their core, the 4 agile values are all about valuing teamwork and collaboration in the pursuit of
	developing working software that meets client criteria.  While tools, timelines, contracts and
	documentation are still important, they are less important than having the flexibility to solve the
	problems the client is facing in the first place.

**Describe velocity**
	Velocity is an attempt to measure the average rate of production of a software team.  It is measured
	by assigning a point value to user stories and then adding the pointvalue of all completed (emphasis
	on completed) stories during a given timeframe.  This total is your velocity and generally will hold
	fairly constant throughout a project, given that stories are assigned points in a similiar manner 		
	across the board.  The goal is to be able to more accurately estimate the duration of a project, or
	the amount of manhours that will have to be thrown at it to complete it in a given timeframe.
**Describe the format and purpose of retrospectives**
	Retrospectives happen because a team should always be trying to eliminate inefficiencies and focus on
	how they can use their time most productively.  Retrospectives are performed at the end of an iteration
	with the goal of making future iterations more effective and efficient.  They can focus on:
	Start- things that members would like to implement believing they would help future iterations be more
	efficient.

	Stop-- things that members would like to see cease in the next iteration, whether because they were
	ineffective or because they believed that there are superior alternatives.

	Continue-- things that members would like to see continue in the future because they served a purpose
	that the members found helpful.

**Pair programming**
	Two coders work together to write and develop code, in the literal sense.  These two coders work on a
	single machine, one driving the code, the other navigating.  They work on each line and each problem
	together.  This serves the purpose of guaranteeing two sets of eyes on the code checking for problems
	or errors, and two brains working on challenges.  It provides a built-in rubber ducky and ensures that
	no piece of code is only understood by one individual.  
**Automated tests**
	Tests are a crucial part of completing user stories and must be performed frequently so that any errors 	can be addressed quickly.  Automating these tests can save developers a great deal of time.  In some 	cases, developers may have the freedom/be expected to automate any test they have to repeat more than 2 	or 3 times in a short timeframe.
**Half-not-half-assed**
	cut your product down to the bare minimums; cut the feature list in half and then do it again.  It is
	better to complete a smaller, more focused project that really excels at what it does than it is to
	release a half-complete mess of a product.  The former can be expanded upon, you'll be lucky if the
	latter can be salvaged at all.
